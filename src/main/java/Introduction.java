public class Introduction {
    /*  В процессе разработки программы возникают баги. Баг - несоответствие ожидаемого результата
    * фактическому. Тестирование помогает вылавливать эти баги и не допускать их в финальной версии
    * программы.
    *   Центральное понятие в тестировании это Test Case (Тестовый сценарий) - артефакт,
    * описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки
    * реализации тестируемой функции или ее части.
    *
    * Под кейсом понимается структура вида:
    *   Action > Expected Result > Test Result
    * Пример:
    *   Open page "login" > Login page is opened > Passed
    *
    * Уровни тестирования:
    *   1. Модульное тестирование
    *       - проверка работы программы на уровне отдельных модулей (классов, методов)
    *   2. Интеграционное тестирование
    *       - проверка совместной работы нескольких модулей
    *   3. Системное тестирование
    *       - проверка работы системы целиком
    *
    *   Чем выше уровень, тем тестирование дальше от программирования. Программисты занимаются модульным
    * тестированием. Это самое низкоуровневое тестирование.
    *   В интеграционном тестировании мы не тестируем отдельно классы и методы, мы тестируем
    * их совместную работу. Занимается этим программист.
    *   Системным тестированием занимается тестировщик, когда проект уже готов. Тестировщик вручную
    * прокликивает кнопки, испытывает функционал программы.
    *
    *   Модульное (unit) тестирование - процесс проверки работы корректности работы отдельных частей
    * исходного кода (чаще всего методов) программы путем запуска тестов в искусственной среде.
    * Осуществляется разработчиком.
    *
    * Что делает тест?:
    *   1. Воспроизводит некоторые данные / делает предварительные действия.
    *   2. Выполняет тестируемый метод, правильный результат работы которого очевиден
    *       автору теста.
    *   3. Выполняет сопоставление полученного результата с ожидаемым (assert).
    *   Если "ожидание" и "реальность" совпадают, тест пройден. Если нет - тест завален (чаще
    *       всего генерируется специальное исключение - AssertionError).
    *
    * Зачем нужно модульное тестирование?
    *   - Чтобы убедится, что разработчик создает методы и классы для конкретных целей
    *   - Снижается число новых ошибок при добавлении новой функциональности
    *   - Тест отражает элементы технического задания, некорректное завершение теста сообщает
    *       о нарушении технических требований заказчика.
    *
    * Есть целая парадигма программирования - TDD (Test Driven Development) разработка отталкиваясь
    * от тестов. Сначала разработчик пишет тесты, а потом пишет программу которая эти тесты проходит.
    *  */
}
